// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PaypalTransaction is an object representing the database table.
type PaypalTransaction struct {
	ID                  int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderID             int         `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	PaypalTransactionID string      `boil:"paypal_transaction_id" json:"paypal_transaction_id" toml:"paypal_transaction_id" yaml:"paypal_transaction_id"`
	PaymentStatus       string      `boil:"payment_status" json:"payment_status" toml:"payment_status" yaml:"payment_status"`
	PaymentAmount       float64     `boil:"payment_amount" json:"payment_amount" toml:"payment_amount" yaml:"payment_amount"`
	Currency            null.String `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	PayerEmail          null.String `boil:"payer_email" json:"payer_email,omitempty" toml:"payer_email" yaml:"payer_email,omitempty"`
	PaymentDate         null.Time   `boil:"payment_date" json:"payment_date,omitempty" toml:"payment_date" yaml:"payment_date,omitempty"`

	R *paypalTransactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paypalTransactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaypalTransactionColumns = struct {
	ID                  string
	OrderID             string
	PaypalTransactionID string
	PaymentStatus       string
	PaymentAmount       string
	Currency            string
	PayerEmail          string
	PaymentDate         string
}{
	ID:                  "id",
	OrderID:             "order_id",
	PaypalTransactionID: "paypal_transaction_id",
	PaymentStatus:       "payment_status",
	PaymentAmount:       "payment_amount",
	Currency:            "currency",
	PayerEmail:          "payer_email",
	PaymentDate:         "payment_date",
}

var PaypalTransactionTableColumns = struct {
	ID                  string
	OrderID             string
	PaypalTransactionID string
	PaymentStatus       string
	PaymentAmount       string
	Currency            string
	PayerEmail          string
	PaymentDate         string
}{
	ID:                  "paypal_transactions.id",
	OrderID:             "paypal_transactions.order_id",
	PaypalTransactionID: "paypal_transactions.paypal_transaction_id",
	PaymentStatus:       "paypal_transactions.payment_status",
	PaymentAmount:       "paypal_transactions.payment_amount",
	Currency:            "paypal_transactions.currency",
	PayerEmail:          "paypal_transactions.payer_email",
	PaymentDate:         "paypal_transactions.payment_date",
}

// Generated where

var PaypalTransactionWhere = struct {
	ID                  whereHelperint
	OrderID             whereHelperint
	PaypalTransactionID whereHelperstring
	PaymentStatus       whereHelperstring
	PaymentAmount       whereHelperfloat64
	Currency            whereHelpernull_String
	PayerEmail          whereHelpernull_String
	PaymentDate         whereHelpernull_Time
}{
	ID:                  whereHelperint{field: "\"paypal_transactions\".\"id\""},
	OrderID:             whereHelperint{field: "\"paypal_transactions\".\"order_id\""},
	PaypalTransactionID: whereHelperstring{field: "\"paypal_transactions\".\"paypal_transaction_id\""},
	PaymentStatus:       whereHelperstring{field: "\"paypal_transactions\".\"payment_status\""},
	PaymentAmount:       whereHelperfloat64{field: "\"paypal_transactions\".\"payment_amount\""},
	Currency:            whereHelpernull_String{field: "\"paypal_transactions\".\"currency\""},
	PayerEmail:          whereHelpernull_String{field: "\"paypal_transactions\".\"payer_email\""},
	PaymentDate:         whereHelpernull_Time{field: "\"paypal_transactions\".\"payment_date\""},
}

// PaypalTransactionRels is where relationship names are stored.
var PaypalTransactionRels = struct {
	Order string
}{
	Order: "Order",
}

// paypalTransactionR is where relationships are stored.
type paypalTransactionR struct {
	Order *Order `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
}

// NewStruct creates a new relationship struct
func (*paypalTransactionR) NewStruct() *paypalTransactionR {
	return &paypalTransactionR{}
}

func (r *paypalTransactionR) GetOrder() *Order {
	if r == nil {
		return nil
	}
	return r.Order
}

// paypalTransactionL is where Load methods for each relationship are stored.
type paypalTransactionL struct{}

var (
	paypalTransactionAllColumns            = []string{"id", "order_id", "paypal_transaction_id", "payment_status", "payment_amount", "currency", "payer_email", "payment_date"}
	paypalTransactionColumnsWithoutDefault = []string{"order_id", "paypal_transaction_id", "payment_status", "payment_amount"}
	paypalTransactionColumnsWithDefault    = []string{"id", "currency", "payer_email", "payment_date"}
	paypalTransactionPrimaryKeyColumns     = []string{"id"}
	paypalTransactionGeneratedColumns      = []string{}
)

type (
	// PaypalTransactionSlice is an alias for a slice of pointers to PaypalTransaction.
	// This should almost always be used instead of []PaypalTransaction.
	PaypalTransactionSlice []*PaypalTransaction

	paypalTransactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paypalTransactionType                 = reflect.TypeOf(&PaypalTransaction{})
	paypalTransactionMapping              = queries.MakeStructMapping(paypalTransactionType)
	paypalTransactionPrimaryKeyMapping, _ = queries.BindMapping(paypalTransactionType, paypalTransactionMapping, paypalTransactionPrimaryKeyColumns)
	paypalTransactionInsertCacheMut       sync.RWMutex
	paypalTransactionInsertCache          = make(map[string]insertCache)
	paypalTransactionUpdateCacheMut       sync.RWMutex
	paypalTransactionUpdateCache          = make(map[string]updateCache)
	paypalTransactionUpsertCacheMut       sync.RWMutex
	paypalTransactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single paypalTransaction record from the query.
func (q paypalTransactionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaypalTransaction, error) {
	o := &PaypalTransaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for paypal_transactions")
	}

	return o, nil
}

// All returns all PaypalTransaction records from the query.
func (q paypalTransactionQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaypalTransactionSlice, error) {
	var o []*PaypalTransaction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to PaypalTransaction slice")
	}

	return o, nil
}

// Count returns the count of all PaypalTransaction records in the query.
func (q paypalTransactionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count paypal_transactions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paypalTransactionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if paypal_transactions exists")
	}

	return count > 0, nil
}

// Order pointed to by the foreign key.
func (o *PaypalTransaction) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paypalTransactionL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaypalTransaction interface{}, mods queries.Applicator) error {
	var slice []*PaypalTransaction
	var object *PaypalTransaction

	if singular {
		var ok bool
		object, ok = maybePaypalTransaction.(*PaypalTransaction)
		if !ok {
			object = new(PaypalTransaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePaypalTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePaypalTransaction))
			}
		}
	} else {
		s, ok := maybePaypalTransaction.(*[]*PaypalTransaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePaypalTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePaypalTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &paypalTransactionR{}
		}
		args[object.OrderID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paypalTransactionR{}
			}

			args[obj.OrderID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.PaypalTransactions = append(foreign.R.PaypalTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.ID {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.PaypalTransactions = append(foreign.R.PaypalTransactions, local)
				break
			}
		}
	}

	return nil
}

// SetOrder of the paypalTransaction to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.PaypalTransactions.
func (o *PaypalTransaction) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"paypal_transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, paypalTransactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.ID
	if o.R == nil {
		o.R = &paypalTransactionR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			PaypalTransactions: PaypalTransactionSlice{o},
		}
	} else {
		related.R.PaypalTransactions = append(related.R.PaypalTransactions, o)
	}

	return nil
}

// PaypalTransactions retrieves all the records using an executor.
func PaypalTransactions(mods ...qm.QueryMod) paypalTransactionQuery {
	mods = append(mods, qm.From("\"paypal_transactions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"paypal_transactions\".*"})
	}

	return paypalTransactionQuery{q}
}

// FindPaypalTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaypalTransaction(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PaypalTransaction, error) {
	paypalTransactionObj := &PaypalTransaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"paypal_transactions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, paypalTransactionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from paypal_transactions")
	}

	return paypalTransactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaypalTransaction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no paypal_transactions provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(paypalTransactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paypalTransactionInsertCacheMut.RLock()
	cache, cached := paypalTransactionInsertCache[key]
	paypalTransactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paypalTransactionAllColumns,
			paypalTransactionColumnsWithDefault,
			paypalTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paypalTransactionType, paypalTransactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paypalTransactionType, paypalTransactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"paypal_transactions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"paypal_transactions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into paypal_transactions")
	}

	if !cached {
		paypalTransactionInsertCacheMut.Lock()
		paypalTransactionInsertCache[key] = cache
		paypalTransactionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the PaypalTransaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaypalTransaction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	paypalTransactionUpdateCacheMut.RLock()
	cache, cached := paypalTransactionUpdateCache[key]
	paypalTransactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paypalTransactionAllColumns,
			paypalTransactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update paypal_transactions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"paypal_transactions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, paypalTransactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paypalTransactionType, paypalTransactionMapping, append(wl, paypalTransactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update paypal_transactions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for paypal_transactions")
	}

	if !cached {
		paypalTransactionUpdateCacheMut.Lock()
		paypalTransactionUpdateCache[key] = cache
		paypalTransactionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q paypalTransactionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for paypal_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for paypal_transactions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaypalTransactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paypalTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"paypal_transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, paypalTransactionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in paypalTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all paypalTransaction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaypalTransaction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodel: no paypal_transactions provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(paypalTransactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paypalTransactionUpsertCacheMut.RLock()
	cache, cached := paypalTransactionUpsertCache[key]
	paypalTransactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			paypalTransactionAllColumns,
			paypalTransactionColumnsWithDefault,
			paypalTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			paypalTransactionAllColumns,
			paypalTransactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert paypal_transactions, could not build update column list")
		}

		ret := strmangle.SetComplement(paypalTransactionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(paypalTransactionPrimaryKeyColumns) == 0 {
				return errors.New("dbmodel: unable to upsert paypal_transactions, could not build conflict column list")
			}

			conflict = make([]string, len(paypalTransactionPrimaryKeyColumns))
			copy(conflict, paypalTransactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"paypal_transactions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(paypalTransactionType, paypalTransactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paypalTransactionType, paypalTransactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert paypal_transactions")
	}

	if !cached {
		paypalTransactionUpsertCacheMut.Lock()
		paypalTransactionUpsertCache[key] = cache
		paypalTransactionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single PaypalTransaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaypalTransaction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no PaypalTransaction provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paypalTransactionPrimaryKeyMapping)
	sql := "DELETE FROM \"paypal_transactions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from paypal_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for paypal_transactions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paypalTransactionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no paypalTransactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from paypal_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for paypal_transactions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaypalTransactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paypalTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"paypal_transactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paypalTransactionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from paypalTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for paypal_transactions")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaypalTransaction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaypalTransaction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaypalTransactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaypalTransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paypalTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"paypal_transactions\".* FROM \"paypal_transactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paypalTransactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in PaypalTransactionSlice")
	}

	*o = slice

	return nil
}

// PaypalTransactionExists checks if the PaypalTransaction row exists.
func PaypalTransactionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"paypal_transactions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if paypal_transactions exists")
	}

	return exists, nil
}

// Exists checks if the PaypalTransaction row exists.
func (o *PaypalTransaction) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PaypalTransactionExists(ctx, exec, o.ID)
}
